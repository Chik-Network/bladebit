name: Start AWS EC2 runner (Linux arm64)
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      instance-type:
        description: name of runner to use
        required: false
        type: string
        default: t4g.small
    secrets:
      GH_PERSONAL_ACCESS_TOKEN:
        required: true
    outputs:
      label:
        description: name of runner to use
        value: ${{ jobs.start-runner.outputs.label }}
      ec2-instance-id:
        description: ec2 instance id
        value: ${{ jobs.start-runner.outputs.ec2-instance-id }}

jobs:
  start-runner:
    name: Start AWS EC2 runner
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          aws-region: ap-southeast-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: Chik-Network/ec2-github-runner@v2.3.4
        with:
            mode: start
            github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
            ec2-image-id: ami-0666798135ce10443
            ec2-instance-type: t4g.small
            subnet-id: subnet-0e542fed87a08293f
            security-group-id: sg-05ac96467d3670aba
            #iam-role-name: github-actions-role
            aws-resource-tags: >
              [
                {"Key": "Name", "Value": "linux-arm64-github-runner"},
                {"Key": "GitHubRepository", "Value": "${{ github.repository }}"}
              ]
            pre-runner-script: |
                 sudo apt-get update && \
                 sudo apt-get update && sudo apt-get install -y ca-certificates curl gnupg && \
                 sudo install -m 0755 -d /etc/apt/keyrings && \
                 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
                 sudo chmod a+r /etc/apt/keyrings/docker.gpg && \
                 echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && \
                 sudo apt-get update && \
                 sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin && \
                 sudo gpasswd -a $USER docker && \
                 newgrp docker && \
                 sudo systemctl start docker

      - name: Get volume-id
        id: get-volume-id
        run: |
          echo "volume-id=$(aws ec2 describe-instances --instance-ids ${{ steps.start-ec2-runner.outputs.ec2-instance-id }} --query 'Reservations[*].Instances[*].BlockDeviceMappings[*].Ebs.VolumeId' --output text)" >> $GITHUB_OUTPUT
      - name: Resize rootfs
        env:
          VOLUME_ID: ${{ steps.get-volume-id.outputs.volume-id }}
        run: |
          aws ec2 modify-volume --size 500 --volume-id $VOLUME_ID
